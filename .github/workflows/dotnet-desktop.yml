name: .NET Desktop Build & Release

on:
  push:
    tags: ['v*']
    branches: ['master', 'main']
  pull_request:
    branches: ['master', 'main']
  workflow_dispatch:
permissions:
  contents: write
  packages: read

jobs:
  build-release:
    runs-on: windows-latest
    timeout-minutes: 30

    env:
      PROJECT_PATH: src/PBManager.UI/PBManager.UI.csproj
      RUNTIME: win-x64
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
    - name: 🧾 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ⚙️ Setup .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        dotnet-quality: ga

    - name: 💾 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }} --locked-mode

    - name: 🏗️ Build (Release)
      run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore --verbosity minimal

    - name: 📤 Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults/*.trx

    - name: 🚀 Publish EXE
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} `
          -c Release `
          -r ${{ env.RUNTIME }} `
          --self-contained true `
          -p:PublishSingleFile=true `
          -p:PublishTrimmed=false `
          -p:ReadyToRun=false `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -p:DebugType=none `
          -p:DebugSymbols=false `
          --no-restore `
          -o publish

    - name: 📦 Create archive
      shell: pwsh
      run: |
        $archiveName = "PBManager-${{ github.ref_name }}-${{ env.RUNTIME }}"
        Compress-Archive -Path "publish/*" -DestinationPath "$archiveName.zip"
        echo "ASSET_PATH=$archiveName.zip" >> $env:GITHUB_ENV
        echo "ASSET_NAME=$archiveName.zip" >> $env:GITHUB_ENV

    - name: ☁️ Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: PBManager-${{ github.ref_name }}
        path: ${{ env.ASSET_PATH }}
        retention-days: 30

    - name: 🏷️ Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.ASSET_PATH }}
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        overwrite: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
